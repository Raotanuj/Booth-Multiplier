library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity booth is
port(mpd,mpr: in std_logic_vector(7 downto 0); go,clk: in std_logic; result: out std_logic_vector(7 downto 0));
end entity;


architecture arch of booth is
signal add,sub: std_logic:='0';
signal resulttemp,next_result:std_logic_vector(7 downto 0):="00000000"; 
signal  toggle_position: integer:=-1;
signal prev_toggle_position,present_index: integer:=-1;
signal state: std_logic_vector(1 downto 0):="00"; 
constant stidle: std_logic_vector(1 downto 0):="00";
constant stcompute: std_logic_vector(1 downto 0):="01";
constant stdone: std_logic_vector(1 downto 0):="10";
component alu_shift_and_add is

port(result: in std_logic_vector(7 downto 0); A: in std_logic_vector(7 downto 0); toggle_position: in integer; 
						sig_add,sig_sub: in std_logic; next_result: out std_logic_vector(7 downto 0));
end component;

begin

duthelper: alu_shift_and_add port map(resulttemp, mpd, toggle_position, add,sub, next_result);

process(clk)
begin
if(rising_edge(clk)) then 
		case(state) is
			when stidle=> 
				if(go='1') then 
 			            resulttemp<= "00000000";
							prev_toggle_position<=-1; 
							state<=stcompute;
			   end if;
		
			when stcompute => 
			
			
			
			if(present_index=-1) then 
	if(mpr(0)='1') then 
		toggle_position<= 0;
		sub<='1';
		add<='0';
	end if;
	
elsif(present_index=0) then
	if(mpr(0)= '0' and mpr(1)='1') then
		toggle_position<=1;
		sub<='1';
		add<='0';
    elsif ( mpr(0)='1' and mpr(1) ='0') then
		toggle_position<=1;
		add<='1';
		sub<='0';
    end if;

elsif(present_index=1) then
	if(mpr(1)= '0' and mpr(2)='1') then
		toggle_position<=2;
		sub<='1';
		add<='0';
    elsif ( mpr(1)='1' and mpr(2) ='0') then
		toggle_position<=2;
		add<='1';
		sub<='0';
    end if;


elsif(present_index=2) then
	if(mpr(2)= '0' and mpr(3)='1') then
		toggle_position<=3;
		sub<='1';
		add<='0';
    elsif ( mpr(2)='1' and mpr(3) ='0') then
		toggle_position<=3;
		add<='1';
		sub<='0';
    end if;


elsif (present_index=3) then
	if( mpr(3)='1') then
		toggle_position<= 4;
		add<='1';
		sub<='0';
	end if;
else add<='0'; sub<='0'; 
	
end if;
present_index<=present_index+1;

				resulttemp<=next_result;
				if(toggle_position = prev_toggle_position) then
					state<=stdone;  prev_toggle_position<=-1; 
				else prev_toggle_position<= toggle_position; 
					state<= stcompute;
				end if;
				
			when stdone => state<= stidle; 
			when others => state<= stidle;
		end case;
	end if;

end process;
result<= next_result;
end architecture;







library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity alu_shift_and_add is
port(result: in std_logic_vector(7 downto 0); A: in std_logic_vector(7 downto 0); toggle_position: in integer; 
						sig_add,sig_sub: in std_logic; next_result: out std_logic_vector(7 downto 0));
end entity;

architecture arch of helper is
signal temp: std_logic_vector(7 downto 0):="00000000";
signal barrel: std_logic_vector(12 downto 0):="0000000000000"; 
begin

process(sig_add,sig_sub) 
begin
barrel(3 downto 0)<="0000";
barrel(11 downto 4)<= A;

temp<=barrel((11-toggle_position) downto (4-toggle_position)) ;
	if(sig_sub='1') then
		next_result<= std_logic_vector (unsigned(result) - unsigned(temp));
   elsif(sig_add='1') then
	   next_result<= std_logic_vector (unsigned(result) + unsigned(temp));
   end if;
end process;

end architecture;






------Test Bench
LIBRARY ieee  ; 
LIBRARY std  ; 
USE ieee.NUMERIC_STD.all  ; 
USE ieee.std_logic_1164.all  ; 
USE ieee.std_logic_textio.all  ; 
USE ieee.std_logic_unsigned.all  ; 
USE std.textio.all  ; 
ENTITY my_test  IS 
END ; 
 
ARCHITECTURE my_test_arch OF my_test IS
  SIGNAL mpd   :  std_logic_vector (7 downto 0)  ; 
  SIGNAL clk   :  STD_LOGIC  ; 
  SIGNAL go   :  STD_LOGIC  ; 
  SIGNAL result   :  std_logic_vector (7 downto 0)  ; 
  SIGNAL mpr   :  std_logic_vector (7 downto 0)  ; 
  COMPONENT booth  
    PORT ( 
      mpd  : in std_logic_vector (7 downto 0) ; 
      clk  : in STD_LOGIC ; 
      go  : in STD_LOGIC ; 
      result  : out std_logic_vector (7 downto 0) ; 
      mpr  : in std_logic_vector (7 downto 0) ); 
  END COMPONENT ; 
BEGIN
  DUT  : booth  
    PORT MAP ( 
      mpd   => mpd  ,
     clk   => clk  ,
      go   => go  ,
      result   => result  ,
      mpr   => mpr   ) ; 


-- "Constant Pattern"
-- Start Time = 0 ns, End Time = 1 us, Period = 0 ns
  Process
	Begin
	 mpd  <= "00000111"  ;
	wait for 1 us ;
-- dumped values till 1 us
	wait;
 End Process;


-- "Constant Pattern"
-- Start Time = 0 ns, End Time = 1 us, Period = 0 ns
  Process
	Begin
	 mpr  <= "00001101"  ;
	wait for 1 us ;
-- dumped values till 1 us
	wait;
 End Process;


-- "Constant Pattern"
-- Start Time = 0 ns, End Time = 1 us, Period = 0 ns
  Process
	Begin
	 go  <= '0'  ;
	wait for 10 ns ;
	 go  <= '1'  ;
	wait for 100 ns ;
	go  <= '0'  ;
	wait for 890 ns ;
-- dumped values till 1 us
	wait;
 End Process;


-- "Clock Pattern" : dutyCycle = 50
-- Start Time = 0 ns, End Time = 1 us, Period = 100 ns
  Process
	Begin
	 clk  <= '0'  ;
	wait for 50 ns ;
-- 50 ns, single loop till start period.
	for Z in 1 to 9
	loop
	    clk  <= '1'  ;
	   wait for 50 ns ;
	    clk  <= '0'  ;
	   wait for 50 ns ;
-- 950 ns, repeat pattern in loop.
	end  loop;
	 clk  <= '1'  ;
	wait for 50 ns ;
-- dumped values till 1 us
	wait;
 End Process;
END;
